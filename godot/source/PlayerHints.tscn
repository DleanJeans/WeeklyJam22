[gd_scene load_steps=3 format=2]

[ext_resource path="res://source/PlayerHints.gd" type="Script" id=1]

[sub_resource type="GDScript" id=1]

script/source = "extends Node

const HINT_OFFSET = Vector2(-25, 0)
const HINT_INVISIBLE_DURATION = 0.75

var ButtonHint = load(\"res://source/ButtonHint.tscn\")
var ButtonHintClass = load(\"res://source/ButtonHint.gd\")

onready var PlayerHints = get_parent()

var hint_dictionary = {}

var current_player
var current_hint

var _hint_count = 0

func free_hints():
	for hint in hint_dictionary.values():
		set_current_player(hint.get_parent())
		free_hint()

func free_hint():
	reparent_hint(PlayerHints)
	
	current_hint.hide()
	hint_dictionary.erase(current_player)

func reparent_hint(new_parent):
	var old_parent = current_hint.get_parent()
	old_parent.remove_child(current_hint)
	new_parent.add_child(current_hint)

func pop_hint_if_has_one():
	if player_already_has_hint():
		pop_hint()

func player_already_has_hint():
	return hint_dictionary.has(current_player)

func pop_hint():
	var hint = current_hint
	hint.pop_out()
	yield(Utility.timer(HINT_INVISIBLE_DURATION), \"timeout\")
	hint.pop_up()

func create_hint_for_player():
	_get_hint_for_player()
	_add_hint_as_sibling_if_new()
	_add_hint_to_dictionary()
	_offset_hint()
	_add_to_player_as_child()
	_show_hint()
	set_hint_button()

func _get_hint_for_player():
	current_hint = _get_free_or_new_hint()

func _get_free_or_new_hint():
	for child in _get_free_hints():
		if child is ButtonHintClass:
			return child
	
	return _create_new_hint()

func _create_new_hint():
	var new_hint = ButtonHint.instance()
	_hint_count += 1
	new_hint.name = \"ButtonHint%s\" % _hint_count
	return new_hint

func _add_hint_as_sibling_if_new():
	if not PlayerHints.get_children().has(current_hint):
		PlayerHints.add_child(current_hint)

func _offset_hint():
	current_hint.rect_position = HINT_OFFSET

func _add_hint_to_dictionary():
	hint_dictionary[current_player] = current_hint

func _add_to_player_as_child():
	reparent_hint(current_player)

func _show_hint():
	current_hint.show()

func player_is_ai_controlled():
	return current_player.is_ai_controlled()

func set_hint_button():
	match current_player.controller:
		\"P1\": current_hint.button = \"Space\"
		\"P2\": current_hint.button = \"Enter\"
		\"P3\", \"P4\", \"P5\", \"P6\": current_hint.button = _get_action_button_name()

func _get_action_button_name():
	if _controller_name_has_USB():
		return \"3\"
	else: return \"A\"

func _controller_name_has_USB():
	var device_name = _get_device_name()
	return device_name.find(\"USB\") > -1

func _get_device_name():
	var controller = current_player.controller # P3, P4, P5, P6
	var controller_id = controller.substr(1, 1) # e.g. P3 -> 3
	var device_id = int(controller_id) - 3 # e.g.: P4 -> 1
	var device_name = Input.get_joy_name(device_id)
	
	return device_name

func _get_free_hints():
	return PlayerHints.get_children()

func set_current_player(player):
	current_player = player
	current_hint = _get_hint(player)

func _get_hint(player):
	if player_already_has_hint():
		return hint_dictionary[player]
	else: return null"

[node name="PlayerHints" type="Control" index="0"]

anchor_left = 0.0
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
rect_pivot_offset = Vector2( 0, 0 )
mouse_filter = 0
mouse_default_cursor_shape = 0
size_flags_horizontal = 1
size_flags_vertical = 1
script = ExtResource( 1 )

[node name="Script" type="Node" parent="." index="0"]

script = SubResource( 1 )


